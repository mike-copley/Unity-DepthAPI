// https://github.com/oculus-samples/Unity-DepthAPI/issues/16

#pragma kernel CSMain
#define UNITY_SINGLE_PASS_STEREO
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Packages/com.meta.xr.depthapi.urp/Shaders/EnvironmentOcclusionURP.hlsl"

struct RaycastResult
{
	float ZDepthDiff;
	float3 Position;
	float3 Normal;
};

#if defined(SHADER_API_D3D11)
#define FLIP_UVS 1
#endif

StructuredBuffer<float3> RaycastRequests;
RWStructuredBuffer<RaycastResult> RaycastResults;

Texture2DArray<float> EnvDepthTextureCS;

int2 EnvDepthTextureSize;

float3 WorldStart;
float3 WorldEnd;
int NumSamples;

float SampleEnvDepthCS(float2 uv, const int slice)
{
	float4x4 reprojMat = _EnvironmentDepth3DOFReprojectionMatrices[slice];
	
#if FLIP_UVS
	uv.y = 1 - uv.y;
#endif
	
	const float4 reprojectedUV = mul(reprojMat, float4(uv.x, uv.y, 0.0, 1.0));
	
	// TODO: fix hardcoded screen space ?
	const uint3 depthtextureuv = uint3(reprojectedUV.x * EnvDepthTextureSize.x, reprojectedUV.y * EnvDepthTextureSize.y, 0);

	// depth z buffer value
	const float inputDepthEye = EnvDepthTextureCS[depthtextureuv];
	const float4 envZBufParams = _EnvironmentDepthZBufferParams;
	
	const float inputDepthNdc = inputDepthEye * 2.0 - 1.0;
	const float envLinearDepth = (1.0f / (inputDepthNdc + envZBufParams.y)) * envZBufParams.x;

	// depth camera z buffer
	float envDepth = (1 - envLinearDepth * _ZBufferParams.w) / (envLinearDepth * _ZBufferParams.z);

	return envDepth;
}

float4 ComputeClipSpacePositionCS(float2 positionNDC, float deviceDepth)
{
	float4 positionCS = float4(positionNDC * 2.0 - 1.0, deviceDepth, 1.0);
	return positionCS;
}

float3 ComputeWorldSpacePositionCS(float2 positionNDC, float deviceDepth, float4x4 invViewProjMatrix)
{
	float4 positionCS = ComputeClipSpacePositionCS(positionNDC, deviceDepth);
	float4 hpositionWS = mul(invViewProjMatrix, positionCS);
	return hpositionWS.xyz / hpositionWS.w;
}

// https://gist.github.com/bgolus/a07ed65602c009d5e2f753826e8078a0
float3 ComputeWorldSpaceNormal(float2 uv, float3 worldPos, int slice)
{
	// get current pixel's view space position
	float3 viewSpacePos_c = worldPos;

	// TODO: fix hardcoded screen space
	float2 offsetTexSpace = float2(6.0, 6.0) / EnvDepthTextureSize;
	
	const float4x4 invProjMat = unity_StereoMatrixInvVP[slice];

	// get view space position at 1 pixel offsets in each major direction
	float2 offsetUV = uv + float2(1.0, 0.0) * offsetTexSpace;
	float deviceDepth = SampleEnvDepthCS(offsetUV, slice);
	float3 viewSpacePos_r = ComputeWorldSpacePositionCS(offsetUV, deviceDepth, invProjMat);

	offsetUV = uv + float2(0.0, 1.0) * offsetTexSpace;
	deviceDepth = SampleEnvDepthCS(offsetUV, slice);
	float3 viewSpacePos_u = ComputeWorldSpacePositionCS(offsetUV, deviceDepth, invProjMat);

	// get the difference between the current and each offset position
	float3 hDeriv = viewSpacePos_r - viewSpacePos_c;
	float3 vDeriv = viewSpacePos_u - viewSpacePos_c;

	// get view space normal from the cross product of the diffs
	float3 viewNormal = -normalize(cross(hDeriv, vDeriv));

#if FLIP_UVS
	viewNormal = -viewNormal;
#endif

	return viewNormal;
}

[numthreads(32, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    const uint slice = 0;
    const uint i = id.x;
	
    const float rayDist = i / (float)NumSamples;

    const float4 rayPos = float4(lerp(WorldStart, WorldEnd, rayDist), 1);
	
	const float4 hcs = mul(unity_StereoMatrixVP[slice], rayPos);
	const float2 uv = (hcs.xy / hcs.w) * 0.5 + float2(0.5, 0.5);

	const float envDepth = SampleEnvDepthCS(uv, slice);
	
	const float4x4 matInvProj = unity_StereoMatrixInvP[slice];
	float envDepthMeters = -ComputeWorldSpacePositionCS(uv, envDepth, matInvProj).z;
	// prevent depth texture edge values from reading a hit in your face
	envDepthMeters += (envDepthMeters < 0.3) * 9999.0;
	float rayDepthMeters = -mul(unity_StereoMatrixV[slice], rayPos).z;
	
	RaycastResults[i].ZDepthDiff = envDepthMeters - rayDepthMeters;
	
	const float4x4 matInvViewProj = unity_StereoMatrixInvVP[slice];
	float3 worldPos = ComputeWorldSpacePositionCS(uv, envDepth, matInvViewProj);
	float3 worldNorm = ComputeWorldSpaceNormal(uv, worldPos, slice);
	
	RaycastResults[i].Position = worldPos;
	RaycastResults[i].Normal = worldNorm;
}